#!/command/with-contenv bash

# Load default configurations for the container
source /config/defaults/00-container

# COLOR CONFIGURATION SETTINGS
# -----------------------------
# ANSI escape codes for background colors
bdg="\e[42m"       # Dark Green Background
bdb="\e[44m"       # Dark Blue Background
bdm="\e[45m"       # Dark Magenta Background
bdgy="\e[100m"     # Dark Gray Background
blr="\e[101m"      # Light Red Background
boff="\e[49m"      # Reset Background Color

# INITIALIZATION FUNCTIONS
# -------------------------
# Function to check if the container initialization scripts have completed
check_container_initialized() {
    # Print debug message to indicate the check has started
    print_debug "Checking to see if container initialization scripts have completed"

    # Temporarily disable output to avoid unnecessary logging
    output_off

    # Loop until the initialization marker file is found
    while [ ! -f /tmp/.container/99-container-init ]; do
        print_debug "Waiting for container initialization to complete"
        sleep 1
    done

    # Re-enable output once the check is complete
    output_on
}

# Verify if a service or its initialization phase is complete by checking for a marker file in `/tmp/.container/`.
check_service_initialized() {
    # Print debug message indicating the start of the service check
    print_debug "Checking if the service has been initialized"

    # Temporarily disable output to avoid unnecessary log clutter
    output_off

    # Determine service suffix and bypass mode
    if [ "$1" = "init" ]; then
        service_suffix="-init"
        csi_bypass=FALSE
    else
        service="$1"
        csi_bypass=TRUE
    fi

    # Determine the service name if bypass mode is FALSE
    if [ "$csi_bypass" = "FALSE" ]; then
        if [ -z "$2" ]; then
            # Identify the service based on the script's location or current directory
            case "$(dirname "$0")" in
                "/var/run/s6/etc/cont-init.d" | "/etc/cont-init.d" )
                    service=$(basename "$0")
                ;;
                *)
                    service=$(basename "$PWD")
                ;;
            esac
        else
            service=$2
        fi
    fi

    # Wait for the marker file to appear, indicating the service has been initialized
    while [ ! -f /tmp/.container/"${service}${service_suffix}" ]; do
        sleep 1
        print_debug "Looking for /tmp/.container/${service}${service_suffix}"
    done

    # Clean up temporary variables
    unset csi_bypass

    # Re-enable output
    output_on
}
