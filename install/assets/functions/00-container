#!/command/with-contenv bash

# Load default container configuration
source /assets/defaults/00-container

# Background Colors Configuration
bdg="\e[42m"       # Background color: Dark Green
bdb="\e[44m"       # Background color: Dark Blue
bdm="\e[45m"       # Background color: Dark Magenta
bdgy="\e[100m"     # Background color: Dark Gray
blr="\e[101m"      # Background color: Light Red
boff="\e[49m"      # Reset background color to default

# Check if container initialization scripts have completed
check_container_initialized() {
    # Print a debug message to indicate initialization check
    print_debug "Checking if container initialization scripts have completed"

    # Disable output during the waiting process
    output_off

    # Wait until the initialization flag file is present
    while [ ! -f /tmp/.container/99-container-init ]; do
        # Continuously print debug messages for visibility
        print_debug "Container initialization in progress..."
        sleep 1  # Wait for 1 second before checking again
    done

    # Re-enable output after initialization is complete
    output_on
}

## Function: Checks if a service has been initialized
## Usage:
## - check_service_initialized init: Checks for the matching filename of /etc/services.available/<folder-name> in /tmp/.container/<folder-name>-init.
## - check_service_initialized <service folder>: Checks for the matching filename of /etc/services.available/<folder-name> in /tmp/.container/<folder-name>.
## Notes:
## - Related to the liftoff function, which writes /tmp/.container/script|foldername.
## - Scripts in /etc/cont-init.d add `-init` to their filename.
## - Scripts in /etc/services.available/* use the folder name directly without any suffix.
check_service_initialized() {
    # Print a debug message to indicate initialization check
    print_debug "Checking to see if service has initialized"

    # Disable output during the waiting process
    output_off

    # Determine service initialization behavior based on input arguments
    if [ "$1" = "init" ]; then
        # For scripts running in /etc/cont-init.d, append `-init` to the service name
        service_suffix="-init"
        csi_bypass=FALSE
    else
        # For services in /etc/services.available, use folder name directly
        service="$1"
        csi_bypass=TRUE
    fi

    # Resolve the service name if bypass is disabled
    if [ "$csi_bypass" = "FALSE" ]; then
        if [ -z "$2" ]; then
            # Determine service name based on the script's execution context
            case "$(dirname "$0")" in
                "/var/run/s6/etc/cont-init.d" | "/etc/cont-init.d" )
                    # Use the script name as the service name
                    service=$(basename "$0")
                ;;
                *)
                    # Use the current working directory as the service name
                    service=$(basename "$PWD")
                ;;
            esac
        else
            # Use the second argument as the service name
            service=$2
        fi
    fi

    # Wait until the service initialization flag file is present
    while [ ! -f /tmp/.container/"${service}${service_suffix}" ]; do
        # Wait for 1 second before checking again
        sleep 1
        # Print debug message to indicate the file being checked
        print_debug "Looking for existence of /tmp/.container/${service}${service_suffix}"
    done

    # Cleanup temporary variable
    unset csi_bypass

    # Re-enable output after initialization is complete
    output_on
}
