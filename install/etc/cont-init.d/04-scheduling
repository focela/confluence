#!/command/with-contenv bash

# Source the main container functions
source /assets/functions/00-container

# Disable verbose output for cleaner logs
output_off

# Prepare single service startup
prepare_service single

# Define process name for logging
PROCESS_NAME="scheduling"

# Check the status of the ENABLE_CRON environment variable
# If ENABLE_CRON is false, disable scheduling in the container
if var_false "${ENABLE_CRON}" ; then
    CONTAINER_ENABLE_SCHEDULING=FALSE
fi

# If ENABLE_CRON is true, enable scheduling and set the backend to "cron"
if var_true "${ENABLE_CRON}" ; then
    CONTAINER_ENABLE_SCHEDULING=TRUE
    CONTAINER_SCHEDULING_BACKEND="cron"
fi

# Check if scheduling is disabled
if var_false "${CONTAINER_ENABLE_SCHEDULING}" ; then
    # Log that scheduling is disabled and stop the service
    print_debug "Disabling Scheduling"
    service_stop "$(basename "$0")"
else
    # Handle the scheduling backend
    case "${CONTAINER_SCHEDULING_BACKEND,,}" in
        "cron" )
            # Create a temporary directory for cron tasks
            mkdir -p /tmp/.container/cron

            # Configure logging for cron if set to "file"
            if [ "${SCHEDULING_LOG_TYPE,,}" = "file" ] ; then
                mkdir -p "${SCHEDULING_LOG_LOCATION}"
                touch "${SCHEDULING_LOG_LOCATION}"/cron.log
                create_logrotate cron "${SCHEDULING_LOG_LOCATION}"/cron.log
            fi

            # Create the scheduling location if it doesn't exist
            if [ ! -d "${CONTAINER_SCHEDULING_LOCATION}" ]; then mkdir -p "${CONTAINER_SCHEDULING_LOCATION}" ; fi

            # Retrieve environment variables related to cron
            cronenv=$(mktemp)
            set -o posix; set -f ; set | grep -E '^CRON_' | sed "s|CRON_||g" > "${cronenv}"
            sed -i "/^PERIOD/d" "${cronenv}"

            # Process each cron-related environment variable
            while IFS= read -r cron_entry; do
                schedule_title="$(echo ${cron_entry} | cut -d = -f1 | tr '[:upper:]' '[:lower:]')"
                schedule_value="$(echo ${cron_entry} | cut -d = -f2)"
                schedule_value="$(echo ${schedule_value:1:-1})"

                # Disable the task if the value is false
                if var_false "${schedule_value}" ; then
                    print_debug "Disabling ${schedule_title} scheduled task"
                    cat <<EOF > "${CONTAINER_SCHEDULING_LOCATION}/${schedule_title}"
# Disabled scheduled task generated by environment variable
# Entered Value: ${schedule}
# Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')
EOF
                else
                    # Add the task to the scheduling location
                    print_debug "Adding ${schedule_title} for scheduling backend"
                    cat <<EOF > "${CONTAINER_SCHEDULING_LOCATION}/${schedule_title}"
# Scheduled task generated from environment variable
# Entered Value: ${schedule}
# Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

${schedule_value}
EOF
                fi
            done < "${cronenv}"
            rm -rf "${cronenv}"
            set +f
            unset cronenv schedules cron_entry schedule_value schedule_title
            unset "${!CRON_@}"

            # Process default cron files from the assets directory
            for d in /assets/defaults/* ; do
                if [ "$d" != "/assets/defaults/00-container" ] ; then
                    output_off
                    source $d
                    output_on
                    cronenv=$(mktemp)
                    set -o posix; set -f ; set | grep -E '^CRON_' | sed "s|CRON_||g" > "${cronenv}"
                    sed -i "/^PERIOD/d" "${cronenv}"

                    # Add tasks from default files
                    while IFS= read -r cron_entry; do
                        schedule_title="$(echo ${cron_entry} | cut -d = -f1 | tr '[:upper:]' '[:lower:]')"
                        schedule_value="$(echo ${cron_entry} | cut -d = -f2)"
                        schedule_value="$(echo ${schedule_value:1:-1})"

                        # Add task if it doesn't already exist
                        if [ ! -f "${CONTAINER_SCHEDULING_LOCATION}/${schedule_title,,}" ] ; then
                            print_debug "Adding ${schedule_title} with value ${schedule_value} to crontab"
                            cat <<EOF > "${CONTAINER_SCHEDULING_LOCATION}/${schedule_title,,}"
# Scheduled task from default file: '${d}'
# Entered Value: ${schedule}
# Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

${schedule_value}
EOF
                        else
                            print_debug "Skipping ${schedule_title}, already exists"
                        fi
                    done < "${cronenv}"
                    rm -rf "${cronenv}"
                    set +f
                    unset cronenv schedules cron_entry schedule_value schedule_title
                    unset "${!CRON_@}"
                fi
            done
            print_notice "Container configured for scheduled tasks with 'cron'"
        ;;
        *)
            # Log error if an unknown scheduling backend is provided
            print_error "Unknown Scheduling Backend"
            exit 1
        ;;
    esac
fi

# Finalize the initialization process
liftoff

# Re-enable verbose output
output_on
