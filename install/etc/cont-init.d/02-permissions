#!/command/with-contenv bash

# Source the main container functions
source /assets/functions/00-container

# Disable verbose output for cleaner logs
output_off

# Define the process name for logging context
PROCESS_NAME="permissions"

## Check legacy permission variables and map them to container-specific variables
## This section ensures backward compatibility with legacy environment variable `ENABLE_PERMISSIONS`
if var_true "${ENABLE_PERMISSIONS}" ; then
    # Enable permissions management
    CONTAINER_ENABLE_PERMISSIONS=TRUE
elif var_false "${ENABLE_PERMISSIONS}" ; then
    # Disable permissions management
    CONTAINER_ENABLE_PERMISSIONS=FALSE
fi

# Check if debug mode for permissions is enabled
# If DEBUG_PERMISSIONS is set to "true", set the container log level to "DEBUG"
if var_true "${DEBUG_PERMISSIONS}" ; then
    CONTAINER_LOG_LEVEL="DEBUG"
fi

# Check if permission management is enabled
if var_true "${CONTAINER_ENABLE_PERMISSIONS}" ; then
    print_debug "Enabling permissions features"

    # Extract user environment variables
    unames="$(set -o posix ; set | sort | grep -e '^USER_' | sed "s|^USER_||g" | tr '[:upper:]' '[:lower:]' | tr ' ' '\n') "
    unames+="$(set -o posix ; set | sort | grep -e '^CONTAINER_USER_' | sed "s|^CONTAINER_USER_||g" | tr '[:upper:]' '[:lower:]' | tr ' ' '\n')"

    # Update UID for each user defined in environment variables
    for upair in $unames; do
        uname=$(echo $upair | cut -d = -f 1)
        uid=$(echo $upair | cut -d = -f 2)

        # Check if the user exists in /etc/passwd
        if grep -e "^${uname}" /etc/passwd > /dev/null; then
           _userexists=true
        elif grep -e "^${uname/_/-}" /etc/passwd > /dev/null; then
           _userexists=true
           uname=${uname/_/-}
        fi

        # If user exists, update the UID
        if [ "${_userexists}" = true ] ; then
            ouid=$(grep -e "^${uname}" /etc/passwd | awk -F: '{print $3}')
            print_debug "Changing user '${uname}' to UID '${uid}' from '${ouid}'"
            sed -i "s|${uname}:x:${ouid}:|${uname}:x:${uid}:|g" /etc/passwd
        fi
    done

    # Extract group environment variables
    groups="$(set -o posix ; set | sort | grep -e '^GROUP_' | sed "s|^GROUP_||g" | tr '[:upper:]' '[:lower:]' | tr ' ' '\n' | sed '/add_.*/d' ) "
    groups+="$(set -o posix ; set | sort | grep -e '^CONTAINER_GROUP_' | sed "s|^CONTAINER_GROUP_||g" | tr '[:upper:]' '[:lower:]' | tr ' ' '\n' | sed '/add_.*/d' ) "

    # Update GID for each group defined in environment variables
    for gpair in $groups; do
        gname=$(echo $gpair | cut -d = -f 1)
        gid=$(echo $gpair | cut -d = -f 2)

        # Check if the group exists in /etc/group
        if grep -e "^${gname}" /etc/group > /dev/null; then
           _groupexists=true
        elif grep -e "^${gname/_/-}" /etc/group > /dev/null; then
           _groupexists=true
           gname=${gname/_/-}
        fi

        # If group exists, update the GID
        if [ "${_groupexists}" = true ] ; then
            # Extract original group and user details
            opu=$(grep -e "^${gname}" /etc/passwd | awk -F: '{print $1}')
            opuid=$(grep -e "^${gname}" /etc/passwd | awk -F: '{print $3}')
            opgid=$(grep -e "^${gname}" /etc/passwd | awk -F: '{print $4}')
            og=$(grep -e "^${gname}" /etc/group | awk -F: '{print $1}')
            oggid=$(grep -e "^${gname}" /etc/group | awk -F: '{print $3}')

            print_debug "Changing group '${gname}' to GID '${gid}' from '${oggid}'"
            sed -i "s|\(.*\):\(.*\):\(.*\):${opgid}:|\1:\2:\3:${gid}:|g" /etc/passwd
            sed -i "s|${og}:x:${oggid}|${og}:x:${gid}|g" /etc/group
        fi
    done

    # Add users to groups defined in environment variables
    groupsadd="$(set -o posix ; set | sort | grep -e '^GROUP_ADD_' | sed 's|^GROUP_ADD_||g' | tr '[:upper:]' '[:lower:]' ) "
    groupsadd+="$(set -o posix ; set | sort | grep -e '^CONTAINER_GROUP_ADD_' | sed 's|^CONTAINER_GROUP_ADD_||g' | tr '[:upper:]' '[:lower:]' )"

    # Iterate over each group and add users
    for gau in $groupsadd; do
        gname=$(echo ${gau} | cut -d = -f1 )
        if grep -e "^${gname}" /etc/group > /dev/null; then
           _groupexists=true
        elif grep -e "^${gname/_/-}" /etc/group > /dev/null; then
           _groupexists=true
           gname=${gname/_/-}
        fi

        # Add users to the group if it exists
        if [ "${_groupexists}" = true ] ; then
            uta=$(echo ${gau} | cut -d = -f2 | tr ',' '\n')

            for userstogroup in ${uta} ; do
                print_debug "Adding user '${userstogroup}' to group '${gname}'"
                os=$(cat /etc/os-release | grep ^ID= | cut -d = -f2)
                case ${os,,} in
                    "alpine" )
                        silent addgroup ${userstogroup} ${gname}
                    ;;
                    "debian" | "ubuntu" )
                        silent usermod -a -G ${gname} ${userstogroup}
                    ;;
                esac
            done
        fi
    done
fi

# Finalize the initialization
liftoff

# Re-enable verbose output
output_on
