#!/command/with-contenv bash

# Set appropriate permissions for key directories and files
chmod -f -R 0755 /assets/{defaults,functions} > /dev/null 2>&1
chmod -f -R 0755 /etc/{cont-init.d,cont-finish.d,services.available} > /dev/null 2>&1

# Initialize environment variables and settings
source /assets/functions/00-container
output_off
PROCESS_NAME="container-init"
showoff

# Create log file and initiate logging for container startup
mkdir -p "${CONTAINER_LOG_FILE_PATH}"
touch "${CONTAINER_LOG_FILE_PATH}"/"${CONTAINER_LOG_FILE_NAME}"
echo "** Container Name: ${CONTAINER_NAME} - Commencing Logging" >> "${CONTAINER_LOG_FILE_PATH}"/"${CONTAINER_LOG_FILE_NAME}"
create_logrotate container "${CONTAINER_LOG_FILE_PATH}"/"${CONTAINER_LOG_FILE_NAME}"

# Check if the container has been restarted
# If the /tmp/.container directory exists, it means the container has been restarted
if [ -d "/tmp/.container" ]; then
    # If the container has been restarted, clean up temporary files and mark as a warm restart
    print_notice "Detected Container that has been restarted - Cleaning '/tmp/.container' files"
    rm -rf /tmp/.container/*
    rm -rf /etc/services.d/*

    # Log warm restart information with timestamp
    echo "$(date +%s) $(date +'%Y-%m-%d %H:%M:%S %Z') - Warm restart detected" >> /tmp/.container/container-restart
else
    # If this is a fresh container startup, proceed with normal initialization
    print_debug "Cold Container startup detected - Proceeding to initialize services normally"
    mkdir -p /tmp/.container/

    # Log container startup information with timestamp
    echo "$(date +%s) $(date +'%Y-%m-%d %H:%M:%S %Z') - Container started" >> /tmp/.container/container-startup
fi

# Append essential configurations and shortcuts to .bashrc
print_debug "Adding shortcuts to .bashrc"
cat <<EOF >> /root/.bashrc
# Source the main container functions
source /assets/functions/00-container

# Create alias for environment command with sorting for better readability
alias env='with-contenv env | sort'

# Function to disable services (stop them)
service_down() {
    # This function disables specified s6 services

    case "\${1}" in
        all )
            # Disable all services
            echo "** Disabling all services"
            for service in /var/run/s6/legacy-services/* ; do
                echo "** Disabling s6 service '\$(basename \${service})'"
                s6-svc -d /var/run/s6/legacy-services/\$(basename \${service})
            done
        ;;
        * )
            # Disable a specific service
            if [ -d "/var/run/s6/legacy-services/\$1" ] ; then
                echo "** Disabling s6 service '\$1'"
                s6-svc -d /var/run/s6/legacy-services/\$1
            fi
        ;;
    esac
}

# Function to list all available s6 services
service_list() {
    # This function lists all active s6 services
    ls -1 /var/run/s6/legacy-services
}

# Function to reset services (clear data or cache)
service_reset() {
    # This function resets specified services by removing temporary data

    case "\${1}" in
        all )
            # Reset all services
            echo "** Resetting all services"
            for service in /var/run/s6/legacy-services/* ; do
                echo "** Reset s6 service '\$(basename \${service})'"
                rm -rf /tmp/.container/\$(basename \${service})
                # Uncomment to re-enable services after reset
                # s6-svc -u /var/run/s6/legacy-services/\$(basename \${service})
            done
        ;;
        * )
            # Reset a specific service
            if [ -d "/var/run/s6/legacy-services/\$1" ] ; then
                echo "** Reset s6 service '\$1'"
                rm -rf /tmp/.container/\$1
            fi
        ;;
    esac
}

# Function to enable services (start them)
service_up() {
    # This function enables (starts) specified s6 services

    case "\${1}" in
        all )
            # Enable all services
            echo "** Enabling all services"
            for service in /var/run/s6/legacy-services/* ; do
                echo "** Enabling s6 service '\$(basename \${service})'"
                s6-svc -u /var/run/s6/legacy-services/\$(basename \${service})
            done
        ;;
        * )
            # Enable a specific service
            if [ -d "/var/run/s6/legacy-services/\$1" ] ; then
                echo "** Enabling s6 service '\$1'"
                s6-svc -u /var/run/s6/legacy-services/\$1
            fi
        ;;
    esac
}

EOF
