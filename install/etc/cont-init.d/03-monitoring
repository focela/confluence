#!/command/with-contenv bash

# Source the main container functions
source /assets/functions/00-container

# Disable verbose output for cleaner logs
output_off

# Prepare single service startup
prepare_service single

# Define process name for logging
PROCESS_NAME="monitoring"

# Disable monitoring if `ENABLE_ZABBIX` is explicitly set to false
if var_false "${ENABLE_ZABBIX}"; then
    CONTAINER_ENABLE_MONITORING=FALSE
fi

# Enable monitoring and set the default backend to Zabbix if `ENABLE_ZABBIX` is set to true
if var_true "${ENABLE_ZABBIX}"; then
    CONTAINER_ENABLE_MONITORING=TRUE
    CONTAINER_MONITORING_BACKEND=zabbix
fi

# Check if monitoring is enabled and proceed with configuration.
if var_true "${CONTAINER_ENABLE_MONITORING}" ; then
    # Determine which monitoring backend to use
    case "${CONTAINER_MONITORING_BACKEND,,}" in
        "zabbix" )
            # Zabbix backend selected
            print_debug "Using Zabbix Backend"

            # Identify the operating system
            os=$(cat /etc/os-release | grep ^ID= | cut -d = -f2)

            # Enable debug level for Zabbix if DEBUG_MODE is set
            if var_true "${DEBUG_MODE}" ; then
                ZABBIX_DEBUGLEVEL=4
            fi

            # Grant sudo permissions to the Zabbix user if enabled
            if var_true "${ZABBIX_USER_SUDO}" ; then
                grant_sudo zabbix
            fi

            # Grant doas permissions to the Zabbix user if enabled
            if var_true "${ZABBIX_USER_DOAS}" ; then
                grant_doas zabbix
            fi

            # PSK Encryption setup for Zabbix if specified
            if [ -n "${ZABBIX_ENCRYPT_PSK_ID}" ] || [ -n "${ZABBIX_ENCRYPT_PSK_KEY}" ] || [ -n "${ZABBIX_ENCRYPT_PSK_FILE}" ] ; then
                transform_file_var ZABBIX_ENCRYPT_PSK_ID ZABBIX_ENCRYPT_PSK_KEY
                print_debug "Zabbix Agent - Using PSK Encryption"

                # Validate PSK inputs
                if [ ! -n "${ZABBIX_ENCRYPT_PSK_FILE}" ] && [ ! -n "${ZABBIX_ENCRYPT_PSK_KEY}" ] ; then
                    print_error "PSK Encryption selected, but no file or key provided!"
                    exit 1
                fi

                # Create PSK file if only the key is provided
                if [ ! -n "${ZABBIX_ENCRYPT_PSK_FILE}" ] && [ -n "${ZABBIX_ENCRYPT_PSK_KEY}" ] ; then
                    print_debug "Creating PSK file from ENV key"
                    mkdir -p "${ZABBIX_CERT_PATH}"
                    ZABBIX_ENCRYPT_PSK_FILE="zabbix_agent.psk"
                    echo "${ZABBIX_ENCRYPT_PSK_KEY}" > "${ZABBIX_CERT_PATH}/${ZABBIX_ENCRYPT_PSK_FILE}"
                fi

                # Set secure permissions for the PSK file
                chmod -f 0600 "${ZABBIX_CERT_PATH}/${ZABBIX_ENCRYPT_PSK_FILE}"
                chown -f -R "${ZABBIX_USER}" "${ZABBIX_CERT_PATH}"

                # PSK configuration parameters
                tls_psk=$(cat <<EOF
TLSConnect=psk
TLSPSKIdentity=${ZABBIX_ENCRYPT_PSK_ID}
TLSPSKFile=${ZABBIX_CERT_PATH}/${ZABBIX_ENCRYPT_PSK_FILE}
EOF
                )
            fi

            # Transform server variables
            transform_file_var ZABBIX_SERVER

            # Configure Zabbix Agent based on the selected type
            case "${ZABBIX_AGENT_TYPE,,}" in
                "1" | "classic" | "c" | "legacy" | "old" )
                    logship_version="classic"
                    if [ "${ZABBIX_SETUP_TYPE,,}" = "auto" ] ; then
                        print_debug "Configuring Zabbix Classic Agent"
                        cat <<EOF > "${ZABBIX_CONFIG_PATH}/${ZABBIX_CONFIG_FILE}"
# Zabbix Classic Agent Configuration
# Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')
AllowKey=system.run[${ZABBIX_REMOTECOMMANDS_ALLOW}]
AllowRoot=${ZABBIX_ALLOW_ROOT}
BufferSend=${ZABBIX_BUFFER_SEND}
BufferSize=${ZABBIX_BUFFER_SIZE}
DebugLevel=${ZABBIX_DEBUGLEVEL}
Hostname=${ZABBIX_HOSTNAME}
ListenIP=${ZABBIX_LISTEN_IP}
ListenPort=${ZABBIX_LISTEN_PORT}
LogFile=${ZABBIX_AGENT_LOG_PATH}/${ZABBIX_AGENT_LOG_FILE}
LogFileSize=${ZABBIX_LOG_FILE_SIZE}
LogRemoteCommands=${ZABBIX_REMOTECOMMANDS_LOG}
MaxLinesPerSecond=${ZABBIX_MAXLINES_SECOND}
PidFile=${ZABBIX_PID}
RefreshActiveChecks=${ZABBIX_REFRESH_ACTIVE_CHECKS}
Server=${ZABBIX_SERVER}
ServerActive=${ZABBIX_SERVER_ACTIVE}
StartAgents=${ZABBIX_START_AGENTS}
User=${ZABBIX_USER}
${tls_psk}
Include=${ZABBIX_CONFIG_PATH}/${ZABBIX_CONFIG_FILE}.d/*.conf
EOF
                        else
                            print_debug "Skipping Configuring Zabbix classic Agent"
                        fi
                    ;;
                    "2" | "m" | "n" | "modern" | "new" )
                        case ${os} in
                            "alpine" )
                                osver=$(cat /etc/os-release | grep VERSION_ID | cut -d = -f 2 | cut -d . -f 2 | cut -d _ -f 1)
                                if [ "${osver}" -ge 11 ] || [ "$osver" = "edge" ] || [ "$osver" = "17*" ]; then
                                    print_debug "We are using newer than Alpine 3.11 to be able to use the Zabbix Modern client.."
                                else
                                    print_error "Sorry, Modern version not available for this images version (Alpine 3.11 + only)"
                                    exit 1
                                fi
                            ;;
                        esac
                        logship_version="modern"
                        if [ "${ZABBIX_SETUP_TYPE,,}" = "auto" ] ; then
                            print_debug "Configuring Zabbix modern Agent"
            cat <<EOF > "${ZABBIX_CONFIG_PATH}"/"${ZABBIX_CONFIG_FILE}"
# Custom Generated Zabbix Agent configuration for version 2 If you want to use your own config set 'ZABBIX_SETUP_TYPE=MANUAL'
# Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

AllowKey=system.run[${ZABBIX_REMOTECOMMANDS_ALLOW}]
BufferSend=${ZABBIX_BUFFER_SEND}
BufferSize=${ZABBIX_BUFFER_SIZE}
ControlSocket=${ZABBIX_SOCKET}
DebugLevel=${ZABBIX_DEBUGLEVEL}
Hostname=${ZABBIX_HOSTNAME}
ListenPort=${ZABBIX_LISTEN_PORT}
LogFile=${ZABBIX_AGENT_LOG_PATH}/${ZABBIX_AGENT_LOG_FILE}
LogFileSize=${ZABBIX_LOG_FILE_SIZE}
RefreshActiveChecks=${ZABBIX_REFRESH_ACTIVE_CHECKS}
Server=${ZABBIX_SERVER}
ServerActive=${ZABBIX_SERVER_ACTIVE}
StatusPort=${ZABBIX_STATUS_PORT}
PidFile=${ZABBIX_PID}
${tls_psk}
Include=${ZABBIX_CONFIG_PATH}/${ZABBIX_CONFIG_FILE}.d/*.conf
EOF
                    else
                        print_debug "Skipping Zabbix Modern Agent Configuration"
                    fi
                ;;
            esac

            # Append additional parameters for denied remote commands
            if [ -n "${ZABBIX_REMOTECOMMANDS_DENY}" ]; then
                echo "DenyKey=system.run[${ZABBIX_REMOTECOMMANDS_DENY}]" >> "${ZABBIX_CONFIG_PATH}/${ZABBIX_CONFIG_FILE}"
            fi

            # Generate monitoring collection configuration
            print_debug "Zabbix Agent - Generating Collection Configuration"
            case ${os} in
                "alpine" )
                    updated_packages="UserParameter=packages.upgradable,doas apk update >/dev/null && apk version | sed '/Installed/d' | wc -l"
                ;;
                "debian" | "ubuntu" )
                    updated_packages="UserParameter=packages.upgradable,doas apt-get update >/dev/null && doas aptitude search '~U' | wc -l"
                ;;
            esac

            mkdir -p "${ZABBIX_CONFIG_PATH}"/"${ZABBIX_CONFIG_FILE}".d
      cat <<EOF > "${ZABBIX_CONFIG_PATH}"/"${ZABBIX_CONFIG_FILE}".d/focela-container_agent.conf
# Zabbix Container Agent Configuration - Automatically Generated based on Operating System
# Find Companion Zabbix Server Templates at https://github.com/focela/alpine or https://github.com/focela/debian
# Autoregister=toica

## Report on Container OS
UserParameter=agent.os,grep "PRETTY_NAME" /etc/os-release | cut -d '"' -f2

## Report on packages that are available to be upgraded
${updated_packages}
EOF

            # Set ownership and permissions
            mkdir -p "${ZABBIX_AGENT_LOG_PATH}"
            chown -R "${ZABBIX_USER}":root "${ZABBIX_AGENT_LOG_PATH}"
            chown -R "${ZABBIX_USER}":root "${ZABBIX_CONFIG_PATH}"
            chown -R "${ZABBIX_USER}":root /var/lib/zabbix
            chmod 775 "${ZABBIX_CONFIG_PATH}"
            create_logrotate zabbix-agent "${ZABBIX_AGENT_LOG_PATH}"/"${ZABBIX_AGENT_LOG_FILE}" zabbix-agent-${logship_version} "${ZABBIX_USER}" root
            print_notice "Container configured for monitoring with '${CONTAINER_MONITORING_BACKEND} ${ZABBIX_AGENT_TYPE}'"
            ;;
            * )
                print_error "Unknown Monitoring Backend"
                exit 1
            ;;
    esac
else
    service_stop "$(basename "$0")"
fi

# Finalize the initialization
liftoff

# Re-enable verbose output
output_on
